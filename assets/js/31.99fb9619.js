(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{1077:function(a,s,_){"use strict";_.r(s);var h=_(19),t=Object(h.a)({},(function(){var a=this,s=a.$createElement,h=a._self._c||s;return h("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[h("h1",{attrs:{id:"分布式数据存储算法"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#分布式数据存储算法"}},[a._v("#")]),a._v(" 分布式数据存储算法")]),a._v(" "),h("h2",{attrs:{id:"_1-概念"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_1-概念"}},[a._v("#")]),a._v(" 1 概念")]),a._v(" "),h("p",[a._v("分布式数据存储中，数据是分布式在不同的服务器上的，那么每条数据应该存储到哪台服务器？取的时候又应该去哪台服务器去取？分布式数据存储算法就是解决此类问题的算法")]),a._v(" "),h("h2",{attrs:{id:"_2-hash算法"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_2-hash算法"}},[a._v("#")]),a._v(" 2 hash算法")]),a._v(" "),h("h3",{attrs:{id:"_2-1-过程"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-过程"}},[a._v("#")]),a._v(" 2.1 过程")]),a._v(" "),h("ol",[h("li",[a._v("客户端开始操作数据")]),a._v(" "),h("li",[a._v("服务器对数据的key进行hash计算，得到一个数字")]),a._v(" "),h("li",[a._v("服务器对得到的数字与服务器数量做取余计算，得到服务器的编号")]),a._v(" "),h("li",[a._v("服务器在相应的服务器上进行操作")])]),a._v(" "),h("p",[a._v("hash算法的数据存储过程图解：\n"),h("img",{attrs:{src:_(576),alt:"image-20201029150210477"}})]),a._v(" "),h("h3",{attrs:{id:"_2-2-缺点和使用现状"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-缺点和使用现状"}},[a._v("#")]),a._v(" 2.2 缺点和使用现状")]),a._v(" "),h("ol",[h("li",[a._v("可能出现某个服务器上的"),h("strong",[a._v("热点数据特别多")]),a._v("，导致该服务器出现性能瓶颈")]),a._v(" "),h("li",[a._v("如果某个服务器"),h("strong",[a._v("出现故障")]),a._v("，会导致"),h("strong",[a._v("大部分数据的hash错乱")]),a._v("，导致大部分数据读写失效或错误")])]),a._v(" "),h("p",[a._v("由于hash算法的上述缺点，现在很少有分布式数据存储使用该算法")]),a._v(" "),h("h2",{attrs:{id:"_3-原始一致性hash算法"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_3-原始一致性hash算法"}},[a._v("#")]),a._v(" 3 原始一致性hash算法")]),a._v(" "),h("h3",{attrs:{id:"_3-1-过程"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-过程"}},[a._v("#")]),a._v(" 3.1 过程")]),a._v(" "),h("ol",[h("li",[a._v("将服务器分布在一个圆环上")]),a._v(" "),h("li",[a._v("客户端开始进行数据操作")]),a._v(" "),h("li",[a._v("服务器对数据的key进行hash计算，得到一个数字")]),a._v(" "),h("li",[a._v("用得到的hash值在圆环对应的各个点上去对比，得到数据在圆环上的落点")]),a._v(" "),h("li",[a._v("服务器顺时针寻找距离该落点最近的一个服务器节点")]),a._v(" "),h("li",[a._v("服务器在相应的服务器上进行操作")])]),a._v(" "),h("p",[a._v("服务器分布样式图解：\n"),h("img",{attrs:{src:_(577),alt:"image-20201029150245321"}})]),a._v(" "),h("h3",{attrs:{id:"_3-2-一致性hash算法的优点"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-一致性hash算法的优点"}},[a._v("#")]),a._v(" 3.2 一致性hash算法的优点")]),a._v(" "),h("p",[a._v("如果某个服务器节点出现故障，只会导致该节点对应区间的数据出现错误，其他节点的数据仍然保存完整。")]),a._v(" "),h("h3",{attrs:{id:"_3-3-一致性hash算法的缺点"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-一致性hash算法的缺点"}},[a._v("#")]),a._v(" 3.3 一致性hash算法的缺点")]),a._v(" "),h("p",[a._v("可能出现某个服务器上的热点数据特别多，导致该服务器出现性能瓶颈")]),a._v(" "),h("h2",{attrs:{id:"_4-基于虚拟节点的一致性hash算法"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_4-基于虚拟节点的一致性hash算法"}},[a._v("#")]),a._v(" 4 基于虚拟节点的一致性hash算法")]),a._v(" "),h("p",[a._v("基于虚拟节点的一致性hash算法指的是在一致性hash算法的基础上，在每个虚拟节对应的区间上增加若干个其他节点的虚拟节点，这样就能最大限度的解决热点数据导致的服务器数据分布不均的问题")]),a._v(" "),h("p",[a._v("基于虚拟节点的一致性hash算法图解：\n"),h("img",{attrs:{src:_(578),alt:"image-20201029150300602"}})]),a._v(" "),h("h2",{attrs:{id:"_5-redis-hash-slot算法"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_5-redis-hash-slot算法"}},[a._v("#")]),a._v(" 5 redis hash slot算法")]),a._v(" "),h("h3",{attrs:{id:"_5-1-过程分析"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-过程分析"}},[a._v("#")]),a._v(" 5.1 过程分析")]),a._v(" "),h("p",[a._v("redis hash slot算法是redis分布式中使用的分布式数据存储算法，他将数据存储在16384个hash槽中，然后再把这16384个hash槽平均分布在每个服务器上，这样用户进行数据操作，只需要找到数据对应的hash槽，然后再找到hash槽对应的服务器即可，整个过程如下：")]),a._v(" "),h("ol",[h("li",[a._v("客户端开始操作数据")]),a._v(" "),h("li",[a._v("服务器对数据的key进行"),h("strong",[a._v("CRC16值")]),a._v("计算，得到一个数字")]),a._v(" "),h("li",[a._v("服务器对得到的数字与16384做取余计算，得到对应的hash槽编号")]),a._v(" "),h("li",[a._v("根据hash槽找到对应的服务器")]),a._v(" "),h("li",[a._v("服务器在相应的服务器上进行操作")])]),a._v(" "),h("h3",{attrs:{id:"_5-2-优缺点分析"}},[h("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-优缺点分析"}},[a._v("#")]),a._v(" 5.2 优缺点分析")]),a._v(" "),h("ol",[h("li",[a._v("如果某个服务器节点出现故障，只会导致该服务器节点上对应的hash槽上的数据出现故障，不影响其他数据")]),a._v(" "),h("li",[a._v("如果某个服务器节点出现故障，redis会迅速把该节点上的hash槽转移到其他服务器节点上（redis底层做了优化），保证把损失降低到最低")]),a._v(" "),h("li",[a._v("由于存在16384个hash槽，所以很好的解决了局部数据热点问题。")])])])}),[],!1,null,null,null);s.default=t.exports},576:function(a,s,_){a.exports=_.p+"assets/img/image-20201029150210477.9b6ac465.png"},577:function(a,s,_){a.exports=_.p+"assets/img/image-20201029150245321.70603ece.png"},578:function(a,s,_){a.exports=_.p+"assets/img/image-20201029150300602.b9005542.png"}}]);