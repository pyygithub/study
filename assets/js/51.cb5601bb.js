(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{1099:function(n,t,a){"use strict";a.r(t);var s=a(19),v=Object(s.a)({},(function(){var n=this,t=n.$createElement,a=n._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("h1",{attrs:{id:"算法复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法复杂度"}},[n._v("#")]),n._v(" 算法复杂度")]),n._v(" "),a("p",[n._v("算法（Algorithm）是指用来操作数据、解决程序问题的一组方法。对于同一个问题，使用不同的算法，也许最终得到的结果是一样的，但在过程中消耗的资源和时间却会有很大的区别。")]),n._v(" "),a("p",[n._v("那么我们应该如何去衡量不同算法之间的优劣呢？")]),n._v(" "),a("p",[n._v("主要还是从算法所占用的「时间」和「空间」两个维度去考量。")]),n._v(" "),a("ul",[a("li",[n._v("时间维度：是指执行当前算法所消耗的时间，我们通常用「时间复杂度」来描述。")]),n._v(" "),a("li",[n._v("空间维度：是指执行当前算法需要占用多少内存空间，我们通常用「空间复杂度」来描述。")])]),n._v(" "),a("p",[n._v("因此，评价一个算法的效率主要是看它的时间复杂度和空间复杂度情况。然而，有的时候时间和空间却又是「鱼和熊掌」，不可兼得的，那么我们就需要从中去取一个平衡点。")]),n._v(" "),a("p",[n._v("下面我来分别介绍一下「时间复杂度」和「空间复杂度」的计算方式。")]),n._v(" "),a("h2",{attrs:{id:"一、-算法的时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、-算法的时间复杂度"}},[n._v("#")]),n._v(" 一、 算法的时间复杂度")]),n._v(" "),a("blockquote",[a("p",[n._v("算法的执行时间与输入值的关系")])]),n._v(" "),a("p",[n._v("我们想要知道一个算法的「时间复杂度」，很多人首先想到的的方法就是把这个算法程序运行一遍，那么它所消耗的时间就自然而然知道了。")]),n._v(" "),a("p",[n._v("这种方式可以吗？当然可以，不过它也有很多弊端。\n这种方式非常容易受运行环境的影响，在性能高的机器上跑出来的结果与在性能低的机器上跑的结果相差会很大。而且对测试时使用的数据规模也有很大关系。再者，并我们在写算法的时候，还没有办法完整的去运行呢。")]),n._v(" "),a("p",[n._v("因此，另一种更为通用的方法就出来了：「 "),a("strong",[n._v("大O符号表示法")]),n._v(" 」，即 T(n) = O(f(n))")]),n._v(" "),a("p",[n._v("我们先来看个例子：")]),n._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[n._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),n._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[n._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" i"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("<=")]),n._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),n._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("{")]),n._v("\n   j "),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("=")]),n._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n   j"),a("span",{pre:!0,attrs:{class:"token operator"}},[n._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("}")]),n._v("\n")])])]),a("p",[n._v("通过「 大O符号表示法 」，这段代码的时间复杂度为：O(n) ，为什么呢?")]),n._v(" "),a("p",[n._v("在 大O符号表示法中，时间复杂度的公式是： T(n) = O( f(n) )，其中f(n) 表示每行代码执行次数之和，而 O 表示正比例关系，这个公式的全称是："),a("strong",[n._v("算法的渐进时间复杂度")]),n._v("。")]),n._v(" "),a("p",[n._v("我们继续看上面的例子，假设每行代码的执行时间都是一样的，我们用 1颗粒时间 来表示，那么这个例子的第一行耗时是1个颗粒时间，第三行的执行时间是 n个颗粒时间，第四行的执行时间也是 n个颗粒时间（第二行和第五行是符号，暂时忽略），那么总时间就是 1颗粒时间 + n颗粒时间 + n颗粒时间 ，即 (1+2n)个颗粒时间，即： T(n) = (1+2n)*颗粒时间，从这个结果可以看出，这个算法的耗时是随着n的变化而变化，因此，我们可以简化的将这个算法的时间复杂度表示为：T(n) = O(n)")]),n._v(" "),a("p",[n._v("为什么可以这么去简化呢，因为大O符号表示法并不是用于来真实代表算法的执行时间的，它是用来表示代码执行时间的增长变化趋势的。")]),n._v(" "),a("p",[n._v("所以上面的例子中，如果n无限大的时候，T(n) = time(1+2n)中的常量1就没有意义了，倍数2也意义不大。因此直接简化为T(n) = O(n) 就可以了。")]),n._v(" "),a("h3",{attrs:{id:"_1-1-常见的时间复杂度量级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-常见的时间复杂度量级"}},[n._v("#")]),n._v(" 1.1 常见的时间复杂度量级")]),n._v(" "),a("ul",[a("li",[n._v("常数阶O(1)")]),n._v(" "),a("li",[n._v("对数阶O(logN)")]),n._v(" "),a("li",[n._v("线性阶O(n)")]),n._v(" "),a("li",[n._v("线性对数阶O(nlogN)")]),n._v(" "),a("li",[n._v("平方阶O(n²)")]),n._v(" "),a("li",[n._v("立方阶O(n³)")]),n._v(" "),a("li",[n._v("K次方阶O(n^k)")]),n._v(" "),a("li",[n._v("指数阶(2^n)")])]),n._v(" "),a("p",[n._v("上面从上至下依次的时间复杂度越来越大，执行的效率越来越低。")]),n._v(" "),a("p",[n._v("下面选取一些较为常用的来讲解一下（没有严格按照顺序）：")]),n._v(" "),a("h4",{attrs:{id:"常数阶o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常数阶o-1"}},[n._v("#")]),n._v(" 常数阶O(1)")]),n._v(" "),a("p",[n._v("无论代码执行了多少行，只要是没有循环等复杂结构，那这个代码的时间复杂度就都是O(1)，如：")]),n._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("int i = 1;\nint j = 2;\n++i;\nj++;\nint m = i + j;\n")])])]),a("p",[n._v("上述代码在执行的时候，它消耗的时候并不随着某个变量的增长而增长，那么无论这类代码有多长，即使有几万几十万行，都可以用O(1)来表示它的时间复杂度。")]),n._v(" "),a("h4",{attrs:{id:"对数阶o-logn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对数阶o-logn"}},[n._v("#")]),n._v(" 对数阶O(logN)")]),n._v(" "),a("p",[n._v("还是先来看代码：")]),n._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("int i = 1;\nwhile(i<n)\n{\n    i = i * 2;\n}\n")])])]),a("p",[n._v("从上面代码可以看到，在while循环里面，每次都将 i 乘以 2，乘完之后，i 距离 n 就越来越近了。我们试着求解一下，假设循环x次之后，i 就大于 2 了，此时这个循环就退出了，也就是说 2 的 x 次方等于 n，那么 x = log2^n\n也就是说当循环 log2^n 次以后，这个代码就结束了。因此这个代码的时间复杂度为："),a("strong",[n._v("O(logn)")])]),n._v(" "),a("h4",{attrs:{id:"线性阶o-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性阶o-n"}},[n._v("#")]),n._v(" 线性阶O(n)")]),n._v(" "),a("p",[n._v("这个在最开始的代码示例中就讲解过了，如：")]),n._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("for(i=1; i<=n; ++i)\n{\n   j = i;\n   j++;\n}\n")])])]),a("p",[n._v("这段代码，for循环里面的代码会执行n遍，因此它消耗的时间是随着n的变化而变化的，因此这类代码都可以用O(n)来表示它的时间复杂度。")]),n._v(" "),a("h4",{attrs:{id:"线性对数阶o-nlogn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线性对数阶o-nlogn"}},[n._v("#")]),n._v(" 线性对数阶O(nlogN)")]),n._v(" "),a("p",[n._v("线性对数阶O(nlogN) 其实非常容易理解，将时间复杂度为O(logn)的代码循环N遍的话，那么它的时间复杂度就是 n * O(logN)，也就是了O(nlogN)。")]),n._v(" "),a("p",[n._v("就拿上面的代码加一点修改来举例：")]),n._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("for(m=1; m<n; m++)\n{\n    i = 1;\n    while(i<n)\n    {\n        i = i * 2;\n    }\n}\n")])])]),a("h4",{attrs:{id:"平方阶o-n2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平方阶o-n2"}},[n._v("#")]),n._v(" 平方阶O(n²)")]),n._v(" "),a("p",[n._v("平方阶O(n²) 就更容易理解了，如果把 O(n) 的代码再嵌套循环一遍，它的时间复杂度就是 O(n²) 了。\n举例：")]),n._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("for(x=1; i<=n; x++)\n{\n   for(i=1; i<=n; i++)\n    {\n       j = i;\n       j++;\n    }\n}\n")])])]),a("p",[n._v("这段代码其实就是嵌套了2层n循环，它的时间复杂度就是 O(n*n)，即 O(n²)\n如果将其中一层循环的n改成m，即：")]),n._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("for(x=1; i<=m; x++)\n{\n   for(i=1; i<=n; i++)\n    {\n       j = i;\n       j++;\n    }\n}\n")])])]),a("p",[n._v("那它的时间复杂度就变成了 O(m*n)")]),n._v(" "),a("h4",{attrs:{id:"立方阶o-n3-、-k次方阶o-n-k"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#立方阶o-n3-、-k次方阶o-n-k"}},[n._v("#")]),n._v(" 立方阶O(n³)**、**K次方阶O(n^k)")]),n._v(" "),a("p",[n._v("参考上面的O(n²) 去理解就好了，O(n³)相当于三层n循环，其它的类似。")]),n._v(" "),a("p",[n._v("除此之外，其实还有 平均时间复杂度、均摊时间复杂度、最坏时间复杂度、最好时间复杂度 的分析方法，有点复杂，这里就不展开了。")]),n._v(" "),a("h2",{attrs:{id:"二、-算法的空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、-算法的空间复杂度"}},[n._v("#")]),n._v(" 二、 算法的空间复杂度")]),n._v(" "),a("blockquote",[a("p",[n._v("算法的存储空间与输入值的关系")])]),n._v(" "),a("p",[n._v("既然时间复杂度不是用来计算程序具体耗时的，那么我也应该明白，空间复杂度也不是用来计算程序实际占用的空间的。")]),n._v(" "),a("p",[n._v("空间复杂度是对一个算法在运行过程中临时占用存储空间大小的一个量度，同样反映的是一个趋势，我们用 S(n) 来定义。")]),n._v(" "),a("p",[n._v("空间复杂度比较常用的有：O(1)、O(n)、O(n²)，我们下面来看看：")]),n._v(" "),a("h3",{attrs:{id:"_2-1-常见空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-常见空间复杂度"}},[n._v("#")]),n._v(" 2.1 常见空间复杂度")]),n._v(" "),a("p",[n._v("空间复杂度比较常用的有：O(1)、O(n)、O(n²)")]),n._v(" "),a("h4",{attrs:{id:"空间复杂度-o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度-o-1"}},[n._v("#")]),n._v(" 空间复杂度 O(1)")]),n._v(" "),a("p",[n._v("如果算法执行所需要的临时空间不随着某个变量n的大小而变化，即此算法空间复杂度为一个常量，可表示为 O(1)\n举例：")]),n._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("int i = 1;\nint j = 2;\n++i;\nj++;\nint m = i + j;\n")])])]),a("p",[n._v("代码中的 i、j、m 所分配的空间都不随着处理数据量变化，因此它的空间复杂度 S(n) = O(1)")]),n._v(" "),a("h4",{attrs:{id:"空间复杂度-o-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度-o-n"}},[n._v("#")]),n._v(" 空间复杂度 O(n)")]),n._v(" "),a("p",[n._v("我们先看一个代码：")]),n._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("int[] m = new int[n]\nfor(i=1; i<=n; ++i)\n{\n   j = i;\n   j++;\n}\n")])])]),a("p",[n._v("这段代码中，第一行new了一个数组出来，这个数据占用的大小为n，这段代码的2-6行，虽然有循环，但没有再分配新的空间，因此，这段代码的空间复杂度主要看第一行即可，即 S(n) = O(n)")])])}),[],!1,null,null,null);t.default=v.exports}}]);